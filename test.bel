;(do 'a 'b (set x 'one) (set y 'two) (if nil \t nil \y t x y) (set y 'three) x y)
;[id _ _]
;(macro (x) (id x x))
(uvar)
(uvar)
(uvar)
(where (cdr x))
(where (car x))
(where (car (cdr x)))
(where x)
(join)
(join 'a)
(join 'a 'b)
(id 'a 'a)
(id (join) (join))
(id \a \a)
(id \a 'a)
(id \a \b)
(id 'a 'b)
(id "hello" "hello")
(id id id)
id
(xar (join) 'a)
(xdr (join) 'a)

(xar x 'first)
x

(xdr x 'second)
x

(xar (car (where x)) '(d e f))
x

(xar (car (where z)) '(a c e))
z


'(a b c . d)

'(a . b)


(xar (car (where myjoin)) (join 'lit (join 'clo (join scope (join '(a b) (join '(join a b) nil))))))
(myjoin \a \b)

(xar (car (where identity)) (lit clo nil (a (b (c . d)) e) d))
(identity '1 '(2 (3 . 4)) '5)
